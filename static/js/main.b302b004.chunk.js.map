{"version":3,"sources":["serviceWorker.js","reducers.js","components/cards.js","components/cardlist.js","components/searchbox.js","components/footer.js","components/scroll.js","components/errorboundary.js","containers/app.js","actions.js","constants.js","index.js"],"names":["Boolean","window","location","hostname","match","intialStateSearch","searchField","intialStateRobots","isPending","robots","error","Cards","id","name","email","className","src","alt","Cardlist","Fragment","map","item","i","key","SearchBox","searchChange","type","placeholder","onChange","Footer","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","user","toLowerCase","includes","length","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b302b004.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\n\t\t REQUEST_ROBOTS_PENDING,\n\t\tREQUEST_ROBOTS_SUCCESS,\n\t\tREQUEST_ROBOTS_FAILED} \n\t\tfrom './constants.js';\n\nconst intialStateSearch ={\n\tsearchField:''\n}\nconst intialStateRobots={\n\tisPending:false,\n\trobots:[],\n\terror:''\n}\n\nexport const searchRobots = (state=intialStateSearch,action={})=>{\n\n\tswitch(action.type){\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\treturn(Object.assign({},state,{searchField:action.payload}));\n\t\tdefault:\n\t\treturn state;\n\n\t}\n}\n\nexport const requestRobots=(state=intialStateRobots,action={})=>{\n\tswitch(action.type){\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\treturn (Object.assign({},state,{isPending:true}));\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\treturn(Object.assign({},state,{robots:action.payload,isPending:false}));\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\treturn(Object.assign({},state,{error:action.payload,isPending:false}));\n\t\tdefault:\n\t\treturn(state);\t\n\t}\n}","import React from 'react';\n\nconst Cards =({id,name,email})=>{\n\t// const {id,name,email}=props;  Destructuring \n\treturn(\n\t\t\n\t\t<div className=\"tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t<img src={`https://robohash.org/${id}?`}alt=\"robot-pic\"/>\n\t\t\t<div>\n\t\t\t\t<h3>{name}</h3>\n\t\t\t\t<h3>{email}</h3>\n\t\t\t</div>\n\t\t\t\n\t\t</div>\n\t\t);\n}\n\nexport default Cards;\n","import React from 'react';\nimport Cards from './cards';\n\n// const Cardlist=(props)=>{\n\t// const {robots}=props;\n\n\n\nconst Cardlist=({robots})=>{\n\n\n\t// const cardArray=robots.map((item,i)=>{\n\t// \treturn(<Cards key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>);\n\t// });\n\t// return(\n\t// \t<React.Fragment>\n\t// \t{cardArray};\n\t// \t</React.Fragment>);\n\n\treturn(\n\t\t<React.Fragment>\n\t\t{robots.map((item,i)=>{\n\t\treturn(\n\t\t\t<Cards \n\t\t\tkey={i} \n\t\t\tid={robots[i].id} \n\t\t\tname={robots[i].name} \n\t\t\temail={robots[i].email}\n\t\t\t/>\n\t\t\t);\n\n\t}\n\t)};\n</React.Fragment>);\n}\n\n\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox=({searchChange})=>{\n\treturn(\n\t\t<div className=\"pa2\">\n\t\t<input className=\"pa3 ba b--green bg-lightest-blue\"type=\"search\" placeholder=\"Enter something\" onChange={searchChange}/>\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\nimport './footer.css'\n\nconst Footer =()=>{\n\nreturn(\n\t<div className=\"a ma1 bg-light-blue tc\">\n\t<p>&copy;Dipin.R .developed with the help of React</p>\n\t</div>\n\t\n\t\n\t);\t\n}\n\nexport default Footer;","import React from 'react';\n\nconst Scroll=(props)=>{\n\n\treturn(\n\t\t<div style={{overflowY:'scroll',border:'5px solid black',height:'800px'}}>\n\t\t{props.children}</div>\n\t\t);\n\t}\n\n\nexport default Scroll;","import React ,{Component} from 'react';\n\n\nclass ErrorBoundary extends Component{\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state= {\n\t\t\thasError:false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error,info){\n\t\tthis.setState({hasError:true});\n\t}\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn (<h1>OOps that's not Good</h1>);\n\t\t}else{\n\t\t\treturn(this.props.children);\n\t\t}\n\n\t}\n\n}\n\nexport default ErrorBoundary;","import React,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport Cardlist from '../components/cardlist';\nimport SearchBox from '../components/searchbox';\nimport Footer from '../components/footer';\nimport './app.css';\nimport Scroll from '../components/scroll';\nimport ErrorBoundary from '../components/errorboundary';\nimport {setSearchField,requestRobots} from '../actions.js';\n\nconst mapStateToProps =(state)=>{\n\treturn(\n\t\t{\n\t\tsearchField:state.searchRobots.searchField,\n\t\trobots:state.requestRobots.robots,\n\t\tisPending:state.requestRobots.isPending,\n\t\terror:state.requestRobots.error\n\t});\n}\n\nconst mapDispatchToProps =(dispatch)=>{\n\treturn(\n{\n\tonSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\n\tonRequestRobots:()=>dispatch(requestRobots()) \n\n}\n\t\t  );\n}\n\n\nclass App extends Component{\n\n\tcomponentDidMount(){\n\t\tthis.props.onRequestRobots();\n\t}\n\n\t\n\n\trender(){\n\t\t\n\t\tconst {searchField,onSearchChange,robots,isPending}=this.props;\n\t\tconst filteredRobots=robots.filter(( user)=>{\n\t\treturn(\n\t\tuser.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\t\t});\n\n\t\tconst A=()=>{\n\t\t\tif(filteredRobots.length===0){\n\t\t\t\treturn(<h2 className=\"tc\">No Such User</h2>);}\n\t\t\telse{\n\t\t\t\treturn(<Cardlist robots={filteredRobots}/>);\n\t\t\t}\t\n\t\t}\n\n\t\tif(isPending){\n\t\t\treturn(<h1 className=\"tc\">Loading</h1>);\n\t\t}\n\t\telse{\n\t\t\n\t\treturn(\n\t\t<div className=\"App tc\">\n\t\t<h1>Robots</h1>\n\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t<Scroll>\n\t\t<ErrorBoundary>\n\t\t\t{A()}\n\t\t</ErrorBoundary>\n\t\t</Scroll>\n\t\t<Footer/>\n\t\t</div>\n\t\t);\n\t}\n\t}\n}\n\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\n\t\t REQUEST_ROBOTS_PENDING,\n\t\tREQUEST_ROBOTS_SUCCESS,\n\t\tREQUEST_ROBOTS_FAILED} \n\t\tfrom './constants.js';\n\nexport const setSearchField =(text)=>({\ntype:CHANGE_SEARCH_FIELD,\npayload: text\n});\n\nexport const requestRobots =()=>(dispatch)=>{\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response=>response.json())\n\t\t.then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\n\t\t.catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}));\n\n}\n","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING=\"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS=\"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED=\"REQUEST_ROBOTS_FAILED\";\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider,} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {searchRobots,requestRobots} from './reducers';\nimport App from './containers/app';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n// <React.Fragment></React.Fragment> can also be written as <> </>  used for returning multiple elements\n\nconst logger=createLogger();\nconst rootReducer=combineReducers({searchRobots,requestRobots});\nconst store=createStore(rootReducer,applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}>\n\t<App store/>\n\t</Provider>\n\t,document.getElementById('root')\n\t);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}